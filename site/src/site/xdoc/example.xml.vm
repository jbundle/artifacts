<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>Welcome</title>
    <author email="don@tourgeek.com">Don Corley</author>
  </properties>
  <body>
    <section name="JBundle - Creating a sample application">
      <p>
      In this example, we are going to create a simple address book application.
      </p>
      <p>
      You will need <a href="http://java.com">java</a> and <a href="http://maven.apache.org">maven</a>.
      </p>
      <p>
      First, create your empty maven project:<br/>
      </p>
      <code>
      mvn archetype:generate -Dfilter=org.jbundle:
      </code>
      <p>
      Choose the jbundle-project template and enter your own group, artifact, and version number.
      To make things simple, use org.mycompany.sample, addressbook, and 1.0.0-SNAPSHOT, respectively.
      </p>
      <p>
      To start the JBundle code generator, change to the new project directory and run maven.<br/>
      <span style="color: red;font-style: italic;">Note:</span>
      <span style="font-style: italic;">Resources in maven are cached the first time it is run.
      Resources in jbundle are loaded on demand from the Internet. Expect a short delay the first time you run any function.</span>
      </p>
      <code>
      cd addressbook<br/>
      mvn java:exec
      </code>
      <p>
      The first screen of the code generator will display a menu.
      </p>
      <p>
      Click on the <img src="/org/jbundle/res/images/icons/Folder.gif"/> 'Class projects' icon.
      The JBundle framework project hierarchy will display.<br/>
      To add your new project, click on the <img src="/org/jbundle/res/images/icons/Form.gif"/> 'Form' button.
      Enter your project details. For this project, enter:<br/>
      <code>
      Name: addressbook<br/>
      Package: com.mycompany.sample<br/>
      </code>
      </p>
      <p>
      Now we're ready to define our 'Contacts' record class.
      Contacts should extend the 'VirtualRecord' class, which gives Contacts
      some useful attributes like an automatic ID field.<br/>
      </p>
    </section>
  </body>
</document>
