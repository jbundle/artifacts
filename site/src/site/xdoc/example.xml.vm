<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>Welcome</title>
    <author email="don@tourgeek.com">Don Corley</author>
  </properties>
  <body>
    <section name="JBundle - Creating a sample application">
      <p>
      In this example, we are going to create a simple address book application.
      </p>
      <p>
      First, you will need <a href="http://java.com">java</a> and <a href="http://maven.apache.org">maven</a> installed.
      </p>
      <p>
      Next, create your empty maven project.<br/>
      </p>
      <code>
      mvn archetype:generate -Dfilter=org.jbundle:
      </code>
      <p>
      Choose the jbundle-project template and enter your own group, artifact, and version number.
      I'll use org.mycompany.sample, addressbook, and 1.0.0-SNAPSHOT, respectively.
      </p>
      <p>
      To start the JBundle code generator, change to the new project directory and run maven.
      (The first time this runs you will have to wait for all the program resources to be cached)
      </p>
      <code>
      cd addressbook
      mvn java:exec
      </code>
      <p>
      The first screen of the code generator will ask for a project name.
      </p>
      <p>
      Now, you are ready to get started developing your application.<br/>
      Click on the <img src="/images/buttons/Folder.gif"/> 'Development menu' icon.<br/>
      Then, click on the <img src="/images/buttons/Maint.gif"/> 'Program Generator' icon.
      We'll call our record, "Contacts". Contacts should extend the 'VirtualRecord' class, which gives Contacts
      some useful attributes like an automatic ID field.<br/>
      </p>
    </section>
  </body>
</document>
