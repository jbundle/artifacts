<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>Welcome</title>
    <author email="don@tourgeek.com">Don Corley</author>
  </properties>
  <body>
    <section name="JBundle - Creating a sample application">
      <p>
      In this example, we're going to create a simple address book application. Your finished application should look like <a href="addressbook.html">this</a>.
      </p>
      <p>
      You will need <a href="http://java.com">java</a> and <a href="http://maven.apache.org">maven</a>.
      </p>
      <p>
      First, create your new maven project:<br/>
      </p>
      <code>
      mvn archetype:generate --define filter=org.jbundle:
      </code>
      <p>
      Choose the jbundle-project template and enter your own group, artifact, and version number.
      To make things simple, use<br/>
      <code>com.mycompany.sample</code>,<br/>
      <code>com.mycompany.sample.addressbook</code>, and<br/>
      <code>1.0.0-SNAPSHOT</code>,<br/>
      respectively.
      </p>
      <p>
      To start the JBundle code generator, change to the new project directory and run maven.<br/>
      <span style="color: red;font-style: italic;">Note:</span>
      <span style="font-style: italic;">Be patient! Resources in maven and
      jbundle are loaded on demand from the Internet. Expect a delay the first time you run any function.</span>
      </p>
      <code>
      cd com.mycompany.sample.addressbook<br/>
      mvn exec:java --activate-profiles dev,local
      </code>
      <p>
      <img src="images/example/01-menu.png"/>
      </p>
      <p>
      The first screen of the code generator will display the JBundle development menu.
      </p>
      <p>
      Click on the <img src="/org/jbundle/res/images/icons/Folder.gif"/> 'Class projects' icon.
      The JBundle framework project hierarchy will display.<br/>
      </p>
      <p>
      <img src="images/example/02-projects.png"/>
      </p>
      <p>
      To add your new project, click on the <img src="/org/jbundle/res/images/icons/Form.gif"/> 'Form' button.
      Enter your project details. For this project, enter:<br/>
      <code>
      Project name: com.mycompany.sample.addressbook <i>(Must match your maven project directory)</i><br/>
      Package: com.mycompany.sample.addressbook<br/>
      </code>
      </p>
      <p>
      <img src="images/example/03-project.png"/>
      </p>
      <p>
      Now we're ready to define our 'Contacts' record class.
      Click on the <img src="/org/jbundle/res/images/icons/Source.gif"/> Class Detail button to display the classes
      for this project (There aren't any yet!).
      Now click on the <img src="/org/jbundle/res/images/icons/Form.gif"/> Form button to enter a new class.<br/>
      We'll call our database record class <b>AddressBook</b>. 
      Contacts should extend the 'VirtualRecord' class, which gives Contacts
      some useful attributes like an ID field.<br/>
      </p>
      <code>
      Class name: AddressBook<br/>
      Base class: VirtualRecord<br/>
      Package: .db <i>(Starting a package name with a '.' makes it relative to the project package)</i><br/>
      Class type: record
      </code>
      <p>
      <img src="images/example/04-class.png"/>
      </p>
      <p>
      Display the database screen by clicking on the File header button. The default values are fine.<br/>
      </p>
      <p>
      <img src="images/example/05-file.png"/>
      </p>
      <p>
      Now we are ready to enter the fields in our database. Click on the 'Fields' button.<br/>
      Enter two fields:<br/>
      <code>
      Name<br/>
      Address
      </code>
      </p>
      <p>
      <img src="images/example/06-fields.png"/>
      </p>
      <!-- p>
      Now we'll specify the indexes for this record: <i>(ID is already the primary key)</i><br/>
      <code>
      Type: Not Unique<br/>
      Key Field 1: Name
      </code>
      </p -->
      <p>
      Now, let's take a look at the the java source code that was created for this record.<br/>
      Close the window and take a look in your maven 'src/main/java' directory. You will find several files:<br/>
      <code>com/mycompany/sample/addressbook/model/db/AddressBookModel.java</code> is the interface file that represents your record.<br/>
      <code>com/mycompany/sample/addressbook/db/AddressBook.java</code> is the thick implementation of this record.<br/>
      <code>com/mycompany/sample/addressbook/thin/db/AddressBook.java</code> is the lightweight implementation of this record.<br/>
      <code>com/mycompany/sample/addressbook/res/db/AddressBookResources.properties</code> is the string resource file for your record.<br/>
      When you create a more complex application, these files would be place in different jar files (OSGi bundles).
      </p>
      <p>
      To compile your code, at the command line type:<br/>
      <code>
      mvn clean install<br/>
      </code>
      </p>
      <p>
      Now we're ready to test our code. Let's run an application using our record. Just type:<br/>
      <code>
      mvn exec:java --activate-profiles local --define record=com.mycompany.sample.addressbook.db.AddressBook<br/>
      </code>
      You should be able to add, delete, and modify records in your new application.<br/>
      </p>
      <p>
      Deploying this application to the web is just as easy. Start up your favorite OSGi container,
      then add the jbundle framework and your new module.<br/>
      I'll use <a href="http://karaf.apache.org">apache karaf</a>. Unzip and start karaf:<br/>
      <code>
      tar zxvf apache-karaf-x.x.x.tar.gz<br/>
      cd apache-karaf-x.x.x<br/>
      bin/karaf<br/>
      </code>
      Once karaf is started, add the jbundle framework and your new bundle:<br/>
      <code>
      shell:source mvn:org.jbundle.config/jbundle-artifacts/${project.version}/shell/setup<br/>
      install mvn:com.mycompany.sample/com.mycompany.sample.addressbook<br/>
      </code>
      Your code is ready to run.
        <a target="_blank" href="http://localhost:8181/webstart/docs/jsapplet.html#?record=com.mycompany.sample.addressbook.db.AddressBook&amp;otherPackages=com.mycompany.sample.addressbook.db&amp;systemname=com.mycompany.sample&amp;webStartPropertiesFile=/org/jbundle/res/webstart/app.properties">Click here</a> to start your app in a new browser window.
      <span style="color: red;font-style: italic;">Note:</span>
      <span style="font-style: italic;">This may take a while the first time this is run.</span><br/>
        jbundle contains a nice javascript wrapper and and OSGi to webstart converter.
        Try opening this window in another browser and notice that changes on one screen are automatically updated on the other.
      </p>
      <p>
      Now that you have finished your application, you may want to save the application and program data. Click on the
      <img src="/org/jbundle/res/images/icons/Export.gif"/> Export icon this display the Export Screen. Now click on the
      Export button to export your program's data and then click on the Export System Data button to export your program
      parameters. You will find your data in the src/main/resources directory.
      </p>
      <p>
      Congratulations! You have just finished your first jbundle application. Now you're ready to try some of the more advanced features in the <a href="./office.html">next tutorial</a>.
      </p>
    </section>
  </body>
</document>
