<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>Welcome</title>
    <author email="don@tourgeek.com">Don Corley</author>
  </properties>
  <body>
    <section name="JBundle - Creating the office application">
      <p>
      In this example, we're going to create a simple office application, consisting of a contact list and a calendar.
      Your finished application should look like <a href="office.html">this</a>.
      </p>
      <p>
      In this example, we'll start with a finished application and examine the program parameters.
      </p>
      <p>
      Let's start out by retrieving the application source code.
      This application is in github at <a href="https://github.com/jbundle/app-office">https://github.com/jbundle/app-office</a>
      To check out this application and build it, type:<br/>
      <code>git clone https://github.com/jbundle/app-office<br/>
      cd app-office<br/>
      mvn clean install</code><br/>
      </p>
      <p>
      Now we're ready to run the examples. Change your directory to 'app' and run this application:<br/>
      <code>cd app<br/>
      mvn exec:java --activate-profiles local</code><br/>
      </p>
      <p>
      Try out the contact and calendar examples. Enter and change some of the test data.
      </p>
      <p>
      Now, Let's bring up the web server and try out the application:<br/>
      <code>cd app<br/>
      mvn exec:java --activate-profiles local</code><br/>
      Click <a href="http://localhost:8181/?systemname=office">here to run the ajax implementation</a>. This is the same java program, run from a web browser.
      You notice that the ajax implementation is not fully implemented yet because of the difficulty of programming in javascript.
      The calendar displays your appointments as a table and the real-time messaging has
      not been implemented yet. The form functionality is adequately implemented.<br/>
      There is also an <a href="http://localhost:8181/apphtml?systemname=office">html implementation</a> and
      a <a href="http://localhost:8181/appxhtml?systemname=office">strict (x)html implementation</a>.
      </p>
      Where jbundle shines is in it's java clients. You can run the full java client in a browser that you ran just ran locally.
      <a href="localhost:8181/appxsl#?applet=org.jbundle.app.office.Main&amp;webStartComponents=org/jbundle/res/webstart/thick.properties,org/jbundle/res/webstart/thin.properties&amp;connectionType=Proxy&amp;systemname=office">Click here to give it a try</a>.
      <p>
      </p>
      <!--
      
      localhost:8181/appxsl#?applet=org.jbundle.app.office.Main&webStartComponents=org/jbundle/res/webstart/thick.properties,org/jbundle/res/webstart/thin.properties&connectionType=Proxy&systemname=office
      
      
      
      http://localhost:8181/appxsl#?applet=org.jbundle.thin.Thin&webStartComponents=org/jbundle/res/webstart/thin.properties&systemname=office&menu=Thin&org.jbundle.util.osgi.webstart.otherPackages=org.jbundle.thin.app.office.calendar.app,org.jbundle.thin.app.office.contact.app
      
      
      
      localhost:8181/appxsl#?applet=org.jbundle.app.office.Main&webStartComponents=org/jbundle/res/webstart/thick.properties,org/jbundle/res/webstart/thin.properties&connectionType=Proxy&systemname=office&org.jbundle.util.osgi.webstart.mainClass=org.jbundle.app.office.Main
      
      -->
      If you are delivering your app over the a slow Internet connection, you can write a thin client with the provided framework.
      <a href="http://localhost:8181/appxhtml?systemname=office">Click here to see the thin client</a>.      
      <p>
      </p>
    </section>
  </body>
</document>
